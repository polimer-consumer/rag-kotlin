[
  {
    "chunk": "cancel  \nfun CoroutineScope.cancel(cause: CancellationException? = null)(source)",
    "metadata": {
      "Topic": "https://kotlinlang.org/api/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/cancel.html"
    }
  },
  {
    "chunk": "Cancels this scope, including its job and all its children with an optional cancellation cause. A cause can be used to specify an error message or to",
    "metadata": {
      "Topic": "https://kotlinlang.org/api/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/cancel.html"
    }
  },
  {
    "chunk": "used to specify an error message or to provide other details on a cancellation reason for debugging purposes. Throws IllegalStateException if the",
    "metadata": {
      "Topic": "https://kotlinlang.org/api/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/cancel.html"
    }
  },
  {
    "chunk": "Throws IllegalStateException if the scope does not have a job in it.",
    "metadata": {
      "Topic": "https://kotlinlang.org/api/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/cancel.html"
    }
  },
  {
    "chunk": "fun CoroutineScope.cancel(message: String, cause: Throwable? = null)(source)",
    "metadata": {
      "Topic": "https://kotlinlang.org/api/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/cancel.html"
    }
  },
  {
    "chunk": "Cancels this scope, including its job and all its children with a specified diagnostic error message. A cause can be specified to provide additional",
    "metadata": {
      "Topic": "https://kotlinlang.org/api/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/cancel.html"
    }
  },
  {
    "chunk": "can be specified to provide additional details on a cancellation reason for debugging purposes. Throws IllegalStateException if the scope does not",
    "metadata": {
      "Topic": "https://kotlinlang.org/api/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/cancel.html"
    }
  },
  {
    "chunk": "if the scope does not have a job in it.",
    "metadata": {
      "Topic": "https://kotlinlang.org/api/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/cancel.html"
    }
  },
  {
    "chunk": "fun CoroutineContext.cancel(cause: CancellationException? = null)(source)",
    "metadata": {
      "Topic": "https://kotlinlang.org/api/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/cancel.html"
    }
  },
  {
    "chunk": "Cancels Job of this context with an optional cancellation cause. See Job.cancel for details.",
    "metadata": {
      "Topic": "https://kotlinlang.org/api/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/cancel.html"
    }
  },
  {
    "chunk": "fun Job.cancel(message: String, cause: Throwable? = null)(source)",
    "metadata": {
      "Topic": "https://kotlinlang.org/api/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/cancel.html"
    }
  },
  {
    "chunk": "Cancels current job, including all its children with a specified diagnostic error message. A cause can be specified to provide additional details on",
    "metadata": {
      "Topic": "https://kotlinlang.org/api/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/cancel.html"
    }
  },
  {
    "chunk": "to provide additional details on a cancellation reason for debugging purposes.",
    "metadata": {
      "Topic": "https://kotlinlang.org/api/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/cancel.html"
    }
  },
  {
    "chunk": "completeWith  \nfun <T> CompletableDeferred<T>.completeWith(result: Result<T>): Boolean(source)",
    "metadata": {
      "Topic": "https://kotlinlang.org/api/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/complete-with.html"
    }
  },
  {
    "chunk": "Completes this deferred value with the value or exception in the given result. Returns true if this deferred was completed as a result of this",
    "metadata": {
      "Topic": "https://kotlinlang.org/api/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/complete-with.html"
    }
  },
  {
    "chunk": "was completed as a result of this invocation and false otherwise (if it was already completed).",
    "metadata": {
      "Topic": "https://kotlinlang.org/api/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/complete-with.html"
    }
  },
  {
    "chunk": "Subsequent invocations of this function have no effect and always produce false.",
    "metadata": {
      "Topic": "https://kotlinlang.org/api/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/complete-with.html"
    }
  },
  {
    "chunk": "This function transitions this deferred in the same ways described by CompletableDeferred.complete and CompletableDeferred.completeExceptionally.",
    "metadata": {
      "Topic": "https://kotlinlang.org/api/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/complete-with.html"
    }
  },
  {
    "chunk": "coroutineScope  \nsuspend fun <R> coroutineScope(block: suspend CoroutineScope.() -> R): R(source)",
    "metadata": {
      "Topic": "https://kotlinlang.org/api/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/coroutine-scope.html"
    }
  },
  {
    "chunk": "Creates a CoroutineScope and calls the specified suspend block with this scope. The provided scope inherits its coroutineContext from the outer",
    "metadata": {
      "Topic": "https://kotlinlang.org/api/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/coroutine-scope.html"
    }
  },
  {
    "chunk": "its coroutineContext from the outer scope, using the Job from that context as the parent for a new Job.",
    "metadata": {
      "Topic": "https://kotlinlang.org/api/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/coroutine-scope.html"
    }
  },
  {
    "chunk": "This function is designed for concurrent decomposition of work. When any child coroutine in this scope fails, this scope fails, cancelling all the",
    "metadata": {
      "Topic": "https://kotlinlang.org/api/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/coroutine-scope.html"
    }
  },
  {
    "chunk": "this scope fails, cancelling all the other children (for a different behavior, see supervisorScope). This function returns as soon as the given block",
    "metadata": {
      "Topic": "https://kotlinlang.org/api/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/coroutine-scope.html"
    }
  },
  {
    "chunk": "returns as soon as the given block and all its child coroutines are completed. A usage of a scope looks like this:",
    "metadata": {
      "Topic": "https://kotlinlang.org/api/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/coroutine-scope.html"
    }
  },
  {
    "chunk": "The scope in this example has the following semantics:  \nshowSomeData returns as soon as the data is loaded and displayed in the UI.",
    "metadata": {
      "Topic": "https://kotlinlang.org/api/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/coroutine-scope.html"
    }
  },
  {
    "chunk": "If doSomeWork throws an exception, then the async task is cancelled and showSomeData rethrows that exception.",
    "metadata": {
      "Topic": "https://kotlinlang.org/api/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/coroutine-scope.html"
    }
  },
  {
    "chunk": "If the outer scope of showSomeData is cancelled, both started async and withContext blocks are cancelled.",
    "metadata": {
      "Topic": "https://kotlinlang.org/api/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/coroutine-scope.html"
    }
  },
  {
    "chunk": "If the async block fails, withContext will be cancelled.",
    "metadata": {
      "Topic": "https://kotlinlang.org/api/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/coroutine-scope.html"
    }
  },
  {
    "chunk": "The method may throw a CancellationException if the current job was cancelled externally, rethrow the exception thrown by block, or throw an",
    "metadata": {
      "Topic": "https://kotlinlang.org/api/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/coroutine-scope.html"
    }
  },
  {
    "chunk": "exception thrown by block, or throw an unhandled Throwable if there is one (for example, from a crashed coroutine that was started with launch in",
    "metadata": {
      "Topic": "https://kotlinlang.org/api/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/coroutine-scope.html"
    }
  },
  {
    "chunk": "that was started with launch in this scope).",
    "metadata": {
      "Topic": "https://kotlinlang.org/api/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/coroutine-scope.html"
    }
  },
  {
    "chunk": "currentCoroutineContext  \ninline suspend fun currentCoroutineContext(): CoroutineContext(source)",
    "metadata": {
      "Topic": "https://kotlinlang.org/api/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/current-coroutine-context.html"
    }
  },
  {
    "chunk": "Returns the current CoroutineContext retrieved by using kotlin.coroutines.coroutineContext. This function is an alias to avoid name clash with",
    "metadata": {
      "Topic": "https://kotlinlang.org/api/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/current-coroutine-context.html"
    }
  },
  {
    "chunk": "is an alias to avoid name clash with CoroutineScope.coroutineContext in a receiver position:",
    "metadata": {
      "Topic": "https://kotlinlang.org/api/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/current-coroutine-context.html"
    }
  },
  {
    "chunk": "delay  \nParameters  \nsuspend fun delay(timeMillis: Long)(source)",
    "metadata": {
      "Topic": "https://kotlinlang.org/api/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/delay.html"
    }
  },
  {
    "chunk": "Delays coroutine for at least the given time without blocking a thread and resumes it after a specified time. If the given timeMillis is",
    "metadata": {
      "Topic": "https://kotlinlang.org/api/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/delay.html"
    }
  },
  {
    "chunk": "time. If the given timeMillis is non-positive, this function returns immediately.",
    "metadata": {
      "Topic": "https://kotlinlang.org/api/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/delay.html"
    }
  },
  {
    "chunk": "This suspending function is cancellable: if the Job of the current coroutine is cancelled while this suspending function is waiting, this function",
    "metadata": {
      "Topic": "https://kotlinlang.org/api/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/delay.html"
    }
  },
  {
    "chunk": "function is waiting, this function immediately resumes with CancellationException. There is a prompt cancellation guarantee: even if this function is",
    "metadata": {
      "Topic": "https://kotlinlang.org/api/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/delay.html"
    }
  },
  {
    "chunk": "guarantee: even if this function is ready to return the result, but was cancelled while suspended, CancellationException will be thrown. See",
    "metadata": {
      "Topic": "https://kotlinlang.org/api/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/delay.html"
    }
  },
  {
    "chunk": "will be thrown. See suspendCancellableCoroutine for low-level details.",
    "metadata": {
      "Topic": "https://kotlinlang.org/api/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/delay.html"
    }
  },
  {
    "chunk": "If you want to delay forever (until cancellation), consider using awaitCancellation instead.",
    "metadata": {
      "Topic": "https://kotlinlang.org/api/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/delay.html"
    }
  },
  {
    "chunk": "Note that delay can be used in select invocation with onTimeout clause.",
    "metadata": {
      "Topic": "https://kotlinlang.org/api/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/delay.html"
    }
  },
  {
    "chunk": "Implementation note: how exactly time is tracked is an implementation detail of CoroutineDispatcher in the context.  \ntimeMillis",
    "metadata": {
      "Topic": "https://kotlinlang.org/api/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/delay.html"
    }
  },
  {
    "chunk": "timeMillis  \ntime in milliseconds.  \nsuspend fun delay(duration: Duration)(source)",
    "metadata": {
      "Topic": "https://kotlinlang.org/api/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/delay.html"
    }
  },
  {
    "chunk": "Delays coroutine for at least the given duration without blocking a thread and resumes it after the specified time. If the given duration is",
    "metadata": {
      "Topic": "https://kotlinlang.org/api/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/delay.html"
    }
  },
  {
    "chunk": "time. If the given duration is non-positive, this function returns immediately.",
    "metadata": {
      "Topic": "https://kotlinlang.org/api/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/delay.html"
    }
  },
  {
    "chunk": "This suspending function is cancellable: if the Job of the current coroutine is cancelled while this suspending function is waiting, this function",
    "metadata": {
      "Topic": "https://kotlinlang.org/api/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/delay.html"
    }
  },
  {
    "chunk": "function is waiting, this function immediately resumes with CancellationException. There is a prompt cancellation guarantee: even if this function is",
    "metadata": {
      "Topic": "https://kotlinlang.org/api/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/delay.html"
    }
  },
  {
    "chunk": "guarantee: even if this function is ready to return the result, but was cancelled while suspended, CancellationException will be thrown. See",
    "metadata": {
      "Topic": "https://kotlinlang.org/api/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/delay.html"
    }
  },
  {
    "chunk": "will be thrown. See suspendCancellableCoroutine for low-level details.",
    "metadata": {
      "Topic": "https://kotlinlang.org/api/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/delay.html"
    }
  },
  {
    "chunk": "If you want to delay forever (until cancellation), consider using awaitCancellation instead.",
    "metadata": {
      "Topic": "https://kotlinlang.org/api/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/delay.html"
    }
  },
  {
    "chunk": "Note that delay can be used in select invocation with onTimeout clause.",
    "metadata": {
      "Topic": "https://kotlinlang.org/api/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/delay.html"
    }
  },
  {
    "chunk": "Implementation note: how exactly time is tracked is an implementation detail of CoroutineDispatcher in the context.",
    "metadata": {
      "Topic": "https://kotlinlang.org/api/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/delay.html"
    }
  },
  {
    "chunk": "ensureActive  \nSee also  \nfun CoroutineScope.ensureActive()(source)  \nEnsures that current scope is active.",
    "metadata": {
      "Topic": "https://kotlinlang.org/api/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/ensure-active.html"
    }
  },
  {
    "chunk": "If the job is no longer active, throws CancellationException. If the job was cancelled, thrown exception contains the original cancellation cause.",
    "metadata": {
      "Topic": "https://kotlinlang.org/api/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/ensure-active.html"
    }
  },
  {
    "chunk": "the original cancellation cause. This function does not do anything if there is no Job in the scope's coroutineContext.",
    "metadata": {
      "Topic": "https://kotlinlang.org/api/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/ensure-active.html"
    }
  },
  {
    "chunk": "This method is a drop-in replacement for the following code, but with more precise exception:  \nensureActive  \nfun Job.ensureActive()(source)",
    "metadata": {
      "Topic": "https://kotlinlang.org/api/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/ensure-active.html"
    }
  },
  {
    "chunk": "Ensures that current job is active. If the job is no longer active, throws CancellationException. If the job was cancelled, thrown exception contains",
    "metadata": {
      "Topic": "https://kotlinlang.org/api/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/ensure-active.html"
    }
  },
  {
    "chunk": "cancelled, thrown exception contains the original cancellation cause.",
    "metadata": {
      "Topic": "https://kotlinlang.org/api/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/ensure-active.html"
    }
  },
  {
    "chunk": "This method is a drop-in replacement for the following code, but with more precise exception:  \nif (!job.isActive) { throw CancellationException()}",
    "metadata": {
      "Topic": "https://kotlinlang.org/api/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/ensure-active.html"
    }
  },
  {
    "chunk": "Content copied to clipboard  \nfun CoroutineContext.ensureActive()(source)  \nEnsures that job in the current context is active.",
    "metadata": {
      "Topic": "https://kotlinlang.org/api/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/ensure-active.html"
    }
  },
  {
    "chunk": "If the job is no longer active, throws CancellationException. If the job was cancelled, thrown exception contains the original cancellation cause.",
    "metadata": {
      "Topic": "https://kotlinlang.org/api/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/ensure-active.html"
    }
  },
  {
    "chunk": "the original cancellation cause. This function does not do anything if there is no Job in the context, since such a coroutine cannot be cancelled.",
    "metadata": {
      "Topic": "https://kotlinlang.org/api/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/ensure-active.html"
    }
  },
  {
    "chunk": "This method is a drop-in replacement for the following code, but with more precise exception:  \nif (!isActive) { throw CancellationException()}",
    "metadata": {
      "Topic": "https://kotlinlang.org/api/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/ensure-active.html"
    }
  },
  {
    "chunk": "Content copied to clipboard",
    "metadata": {
      "Topic": "https://kotlinlang.org/api/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/ensure-active.html"
    }
  },
  {
    "chunk": "ensurePresent  \njvm  \ninline suspend fun ThreadLocal<*>.ensurePresent()(source)",
    "metadata": {
      "Topic": "https://kotlinlang.org/api/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/ensure-present.html"
    }
  },
  {
    "chunk": "Checks whether current thread local is present in the coroutine context and throws IllegalStateException if it is not. It is a good practice to",
    "metadata": {
      "Topic": "https://kotlinlang.org/api/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/ensure-present.html"
    }
  },
  {
    "chunk": "if it is not. It is a good practice to validate that thread local is present in the context, especially in large code-bases, to avoid stale",
    "metadata": {
      "Topic": "https://kotlinlang.org/api/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/ensure-present.html"
    }
  },
  {
    "chunk": "in large code-bases, to avoid stale thread-local values and to have a strict invariants.",
    "metadata": {
      "Topic": "https://kotlinlang.org/api/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/ensure-present.html"
    }
  },
  {
    "chunk": "E.g. one may use the following method to enforce proper use of the thread locals with coroutines:",
    "metadata": {
      "Topic": "https://kotlinlang.org/api/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/ensure-present.html"
    }
  },
  {
    "chunk": "invoke  \ninline suspend operator fun <T> CoroutineDispatcher.invoke(noinline block: suspend CoroutineScope.() -> T): T(source)",
    "metadata": {
      "Topic": "https://kotlinlang.org/api/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/invoke.html"
    }
  },
  {
    "chunk": "Calls the specified suspending block with the given CoroutineDispatcher, suspends until it completes, and returns the result.",
    "metadata": {
      "Topic": "https://kotlinlang.org/api/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/invoke.html"
    }
  },
  {
    "chunk": "This inline function calls withContext.",
    "metadata": {
      "Topic": "https://kotlinlang.org/api/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/invoke.html"
    }
  },
  {
    "chunk": "isActive  \nval CoroutineScope.isActive: Boolean(source)",
    "metadata": {
      "Topic": "https://kotlinlang.org/api/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/is-active.html"
    }
  },
  {
    "chunk": "Returns true when the current Job is still active (has not completed and was not cancelled yet).",
    "metadata": {
      "Topic": "https://kotlinlang.org/api/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/is-active.html"
    }
  },
  {
    "chunk": "Check this property in long-running computation loops to support cancellation:",
    "metadata": {
      "Topic": "https://kotlinlang.org/api/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/is-active.html"
    }
  },
  {
    "chunk": "This property is a shortcut for coroutineContext.isActive in the scope when CoroutineScope is available. See coroutineContext, isActive and",
    "metadata": {
      "Topic": "https://kotlinlang.org/api/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/is-active.html"
    }
  },
  {
    "chunk": "See coroutineContext, isActive and Job.isActive.",
    "metadata": {
      "Topic": "https://kotlinlang.org/api/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/is-active.html"
    }
  },
  {
    "chunk": "val CoroutineContext.isActive: Boolean(source)",
    "metadata": {
      "Topic": "https://kotlinlang.org/api/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/is-active.html"
    }
  },
  {
    "chunk": "Returns true when the Job of the coroutine in this context is still active (has not completed and was not cancelled yet) or the context does not have",
    "metadata": {
      "Topic": "https://kotlinlang.org/api/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/is-active.html"
    }
  },
  {
    "chunk": "yet) or the context does not have a Job in it.",
    "metadata": {
      "Topic": "https://kotlinlang.org/api/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/is-active.html"
    }
  },
  {
    "chunk": "Check this property in long-running computation loops to support cancellation when CoroutineScope.isActive is not available:",
    "metadata": {
      "Topic": "https://kotlinlang.org/api/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/is-active.html"
    }
  },
  {
    "chunk": "while (coroutineContext.isActive) { // do some computation}  \nContent copied to clipboard",
    "metadata": {
      "Topic": "https://kotlinlang.org/api/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/is-active.html"
    }
  },
  {
    "chunk": "Content copied to clipboard  \nThe coroutineContext.isActive expression is a shortcut for get(Job)?.isActive ?: true. See Job.isActive.",
    "metadata": {
      "Topic": "https://kotlinlang.org/api/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/is-active.html"
    }
  },
  {
    "chunk": "isPresent  \njvm  \ninline suspend fun ThreadLocal<*>.isPresent(): Boolean(source)",
    "metadata": {
      "Topic": "https://kotlinlang.org/api/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/is-present.html"
    }
  },
  {
    "chunk": "Return true when current thread local is present in the coroutine context, false otherwise. Thread local can be present in the context only if it was",
    "metadata": {
      "Topic": "https://kotlinlang.org/api/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/is-present.html"
    }
  },
  {
    "chunk": "present in the context only if it was added via asContextElement to the context.",
    "metadata": {
      "Topic": "https://kotlinlang.org/api/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/is-present.html"
    }
  },
  {
    "chunk": "Example of usage:",
    "metadata": {
      "Topic": "https://kotlinlang.org/api/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/is-present.html"
    }
  },
  {
    "chunk": "job  \nval CoroutineContext.job: Job(source)",
    "metadata": {
      "Topic": "https://kotlinlang.org/api/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/job.html"
    }
  },
  {
    "chunk": "Retrieves the current Job instance from the given CoroutineContext or throws IllegalStateException if no job is present in the context.",
    "metadata": {
      "Topic": "https://kotlinlang.org/api/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/job.html"
    }
  },
  {
    "chunk": "This method is a short-cut for coroutineContext[Job]!! and should be used only when it is known in advance that the context does have instance of the",
    "metadata": {
      "Topic": "https://kotlinlang.org/api/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/job.html"
    }
  },
  {
    "chunk": "the context does have instance of the job in it.",
    "metadata": {
      "Topic": "https://kotlinlang.org/api/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/job.html"
    }
  },
  {
    "chunk": "joinAll  \nsuspend fun joinAll(vararg jobs: Job)(source)",
    "metadata": {
      "Topic": "https://kotlinlang.org/api/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/join-all.html"
    }
  },
  {
    "chunk": "Suspends current coroutine until all given jobs are complete. This method is semantically equivalent to joining all given jobs one by one with",
    "metadata": {
      "Topic": "https://kotlinlang.org/api/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/join-all.html"
    }
  },
  {
    "chunk": "joining all given jobs one by one with jobs.forEach { it.join() }.",
    "metadata": {
      "Topic": "https://kotlinlang.org/api/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/join-all.html"
    }
  },
  {
    "chunk": "This suspending function is cancellable: if the Job of the current coroutine is cancelled while this suspending function is waiting, this function",
    "metadata": {
      "Topic": "https://kotlinlang.org/api/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/join-all.html"
    }
  },
  {
    "chunk": "function is waiting, this function immediately resumes with CancellationException. There is a prompt cancellation guarantee: even if this function is",
    "metadata": {
      "Topic": "https://kotlinlang.org/api/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/join-all.html"
    }
  },
  {
    "chunk": "guarantee: even if this function is ready to return the result, but was cancelled while suspended, CancellationException will be thrown. See",
    "metadata": {
      "Topic": "https://kotlinlang.org/api/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/join-all.html"
    }
  },
  {
    "chunk": "will be thrown. See suspendCancellableCoroutine for low-level details.",
    "metadata": {
      "Topic": "https://kotlinlang.org/api/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/join-all.html"
    }
  },
  {
    "chunk": "suspend fun Collection<Job>.joinAll()(source)",
    "metadata": {
      "Topic": "https://kotlinlang.org/api/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/join-all.html"
    }
  },
  {
    "chunk": "Suspends current coroutine until all given jobs are complete. This method is semantically equivalent to joining all given jobs one by one with",
    "metadata": {
      "Topic": "https://kotlinlang.org/api/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/join-all.html"
    }
  },
  {
    "chunk": "joining all given jobs one by one with forEach { it.join() }.",
    "metadata": {
      "Topic": "https://kotlinlang.org/api/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/join-all.html"
    }
  },
  {
    "chunk": "This suspending function is cancellable: if the Job of the current coroutine is cancelled while this suspending function is waiting, this function",
    "metadata": {
      "Topic": "https://kotlinlang.org/api/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/join-all.html"
    }
  },
  {
    "chunk": "function is waiting, this function immediately resumes with CancellationException. There is a prompt cancellation guarantee: even if this function is",
    "metadata": {
      "Topic": "https://kotlinlang.org/api/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/join-all.html"
    }
  },
  {
    "chunk": "guarantee: even if this function is ready to return the result, but was cancelled while suspended, CancellationException will be thrown. See",
    "metadata": {
      "Topic": "https://kotlinlang.org/api/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/join-all.html"
    }
  },
  {
    "chunk": "will be thrown. See suspendCancellableCoroutine for low-level details.",
    "metadata": {
      "Topic": "https://kotlinlang.org/api/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/join-all.html"
    }
  },
  {
    "chunk": "launch  \nParameters",
    "metadata": {
      "Topic": "https://kotlinlang.org/api/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/launch.html"
    }
  },
  {
    "chunk": "fun CoroutineScope.launch(context: CoroutineContext = EmptyCoroutineContext, start: CoroutineStart = CoroutineStart.DEFAULT, block: suspend",
    "metadata": {
      "Topic": "https://kotlinlang.org/api/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/launch.html"
    }
  },
  {
    "chunk": "CoroutineStart.DEFAULT, block: suspend CoroutineScope.() -> Unit): Job(source)",
    "metadata": {
      "Topic": "https://kotlinlang.org/api/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/launch.html"
    }
  },
  {
    "chunk": "Launches a new coroutine without blocking the current thread and returns a reference to the coroutine as a Job. The coroutine is cancelled when the",
    "metadata": {
      "Topic": "https://kotlinlang.org/api/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/launch.html"
    }
  },
  {
    "chunk": "The coroutine is cancelled when the resulting job is cancelled.",
    "metadata": {
      "Topic": "https://kotlinlang.org/api/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/launch.html"
    }
  },
  {
    "chunk": "The coroutine context is inherited from a CoroutineScope. Additional context elements can be specified with context argument. If the context does not",
    "metadata": {
      "Topic": "https://kotlinlang.org/api/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/launch.html"
    }
  },
  {
    "chunk": "argument. If the context does not have any dispatcher nor any other ContinuationInterceptor, then Dispatchers.Default is used. The parent job is",
    "metadata": {
      "Topic": "https://kotlinlang.org/api/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/launch.html"
    }
  },
  {
    "chunk": "is used. The parent job is inherited from a CoroutineScope as well, but it can also be overridden with a corresponding context element.",
    "metadata": {
      "Topic": "https://kotlinlang.org/api/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/launch.html"
    }
  },
  {
    "chunk": "By default, the coroutine is immediately scheduled for execution. Other start options can be specified via start parameter. See CoroutineStart for",
    "metadata": {
      "Topic": "https://kotlinlang.org/api/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/launch.html"
    }
  },
  {
    "chunk": "start parameter. See CoroutineStart for details. An optional start parameter can be set to CoroutineStart.LAZY to start coroutine lazily. In this",
    "metadata": {
      "Topic": "https://kotlinlang.org/api/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/launch.html"
    }
  },
  {
    "chunk": "to start coroutine lazily. In this case, the coroutine Job is created in new state. It can be explicitly started with start function and will be",
    "metadata": {
      "Topic": "https://kotlinlang.org/api/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/launch.html"
    }
  },
  {
    "chunk": "started with start function and will be started implicitly on the first invocation of join.",
    "metadata": {
      "Topic": "https://kotlinlang.org/api/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/launch.html"
    }
  },
  {
    "chunk": "Uncaught exceptions in this coroutine cancel the parent job in the context by default (unless CoroutineExceptionHandler is explicitly specified),",
    "metadata": {
      "Topic": "https://kotlinlang.org/api/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/launch.html"
    }
  },
  {
    "chunk": "is explicitly specified), which means that when launch is used with the context of another coroutine, then any uncaught exception leads to the",
    "metadata": {
      "Topic": "https://kotlinlang.org/api/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/launch.html"
    }
  },
  {
    "chunk": "any uncaught exception leads to the cancellation of the parent coroutine.",
    "metadata": {
      "Topic": "https://kotlinlang.org/api/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/launch.html"
    }
  },
  {
    "chunk": "See newCoroutineContext for a description of debugging facilities that are available for a newly created coroutine.  \ncontext",
    "metadata": {
      "Topic": "https://kotlinlang.org/api/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/launch.html"
    }
  },
  {
    "chunk": "context  \nadditional to CoroutineScope.coroutineContext context of the coroutine.  \nstart",
    "metadata": {
      "Topic": "https://kotlinlang.org/api/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/launch.html"
    }
  },
  {
    "chunk": "start  \ncoroutine start option. The default value is CoroutineStart.DEFAULT.  \nblock",
    "metadata": {
      "Topic": "https://kotlinlang.org/api/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/launch.html"
    }
  },
  {
    "chunk": "block  \nthe coroutine code which will be invoked in the context of the provided scope.",
    "metadata": {
      "Topic": "https://kotlinlang.org/api/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/launch.html"
    }
  },
  {
    "chunk": "newCoroutineContext  \ncommonjsAndWasmSharedjvmnative",
    "metadata": {
      "Topic": "https://kotlinlang.org/api/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/new-coroutine-context.html"
    }
  },
  {
    "chunk": "commonjsAndWasmSharedjvmnative  \nexpect fun CoroutineScope.newCoroutineContext(context: CoroutineContext): CoroutineContext(source)",
    "metadata": {
      "Topic": "https://kotlinlang.org/api/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/new-coroutine-context.html"
    }
  },
  {
    "chunk": "Creates a context for a new coroutine. It installs Dispatchers.Default when no other dispatcher or ContinuationInterceptor is specified and adds",
    "metadata": {
      "Topic": "https://kotlinlang.org/api/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/new-coroutine-context.html"
    }
  },
  {
    "chunk": "is specified and adds optional support for debugging facilities (when turned on) and copyable-thread-local facilities on JVM.",
    "metadata": {
      "Topic": "https://kotlinlang.org/api/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/new-coroutine-context.html"
    }
  },
  {
    "chunk": "actual fun CoroutineScope.newCoroutineContext(context: CoroutineContext): CoroutineContext(source)",
    "metadata": {
      "Topic": "https://kotlinlang.org/api/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/new-coroutine-context.html"
    }
  },
  {
    "chunk": "actual fun CoroutineScope.newCoroutineContext(context: CoroutineContext): CoroutineContext(source)  \n@ExperimentalCoroutinesApi",
    "metadata": {
      "Topic": "https://kotlinlang.org/api/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/new-coroutine-context.html"
    }
  },
  {
    "chunk": "Creates a context for a new coroutine. It installs Dispatchers.Default when no other dispatcher or ContinuationInterceptor is specified and adds",
    "metadata": {
      "Topic": "https://kotlinlang.org/api/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/new-coroutine-context.html"
    }
  },
  {
    "chunk": "is specified and adds optional support for debugging facilities (when turned on) and copyable-thread-local facilities on JVM. See DEBUG_PROPERTY_NAME",
    "metadata": {
      "Topic": "https://kotlinlang.org/api/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/new-coroutine-context.html"
    }
  },
  {
    "chunk": "on JVM. See DEBUG_PROPERTY_NAME for description of debugging facilities on JVM.",
    "metadata": {
      "Topic": "https://kotlinlang.org/api/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/new-coroutine-context.html"
    }
  },
  {
    "chunk": "actual fun CoroutineScope.newCoroutineContext(context: CoroutineContext): CoroutineContext(source)",
    "metadata": {
      "Topic": "https://kotlinlang.org/api/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/new-coroutine-context.html"
    }
  },
  {
    "chunk": "newFixedThreadPoolContext  \nconcurrentjvmnative  \nParameters",
    "metadata": {
      "Topic": "https://kotlinlang.org/api/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/new-fixed-thread-pool-context.html"
    }
  },
  {
    "chunk": "concurrentjvmnative  \nParameters  \nexpect fun newFixedThreadPoolContext(nThreads: Int, name: String): CloseableCoroutineDispatcher(source)",
    "metadata": {
      "Topic": "https://kotlinlang.org/api/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/new-fixed-thread-pool-context.html"
    }
  },
  {
    "chunk": "@ExperimentalCoroutinesApi  \n@DelicateCoroutinesApi",
    "metadata": {
      "Topic": "https://kotlinlang.org/api/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/new-fixed-thread-pool-context.html"
    }
  },
  {
    "chunk": "Creates a coroutine execution context with the fixed-size thread-pool and built-in yield support. NOTE: The resulting CoroutineDispatcher owns native",
    "metadata": {
      "Topic": "https://kotlinlang.org/api/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/new-fixed-thread-pool-context.html"
    }
  },
  {
    "chunk": "CoroutineDispatcher owns native resources (its threads). Resources are reclaimed by CloseableCoroutineDispatcher.close.",
    "metadata": {
      "Topic": "https://kotlinlang.org/api/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/new-fixed-thread-pool-context.html"
    }
  },
  {
    "chunk": "If the resulting dispatcher is closed and attempt to submit a continuation task is made,",
    "metadata": {
      "Topic": "https://kotlinlang.org/api/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/new-fixed-thread-pool-context.html"
    }
  },
  {
    "chunk": "On the JVM, the Job of the affected task is cancelled and the task is submitted to the Dispatchers.IO, so that the affected coroutine can clean up",
    "metadata": {
      "Topic": "https://kotlinlang.org/api/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/new-fixed-thread-pool-context.html"
    }
  },
  {
    "chunk": "the affected coroutine can clean up its resources and promptly complete.",
    "metadata": {
      "Topic": "https://kotlinlang.org/api/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/new-fixed-thread-pool-context.html"
    }
  },
  {
    "chunk": "On Native, the attempt to submit a task throws an exception.",
    "metadata": {
      "Topic": "https://kotlinlang.org/api/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/new-fixed-thread-pool-context.html"
    }
  },
  {
    "chunk": "This is a delicate API. The result of this method is a closeable resource with the associated native resources (threads or native workers). It should",
    "metadata": {
      "Topic": "https://kotlinlang.org/api/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/new-fixed-thread-pool-context.html"
    }
  },
  {
    "chunk": "(threads or native workers). It should not be allocated in place, should be closed at the end of its lifecycle, and has non-trivial memory and CPU",
    "metadata": {
      "Topic": "https://kotlinlang.org/api/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/new-fixed-thread-pool-context.html"
    }
  },
  {
    "chunk": "and has non-trivial memory and CPU footprint. If you do not need a separate thread pool, but only have to limit effective parallelism of the",
    "metadata": {
      "Topic": "https://kotlinlang.org/api/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/new-fixed-thread-pool-context.html"
    }
  },
  {
    "chunk": "to limit effective parallelism of the dispatcher, it is recommended to use Dispatchers.IO.limitedParallelism(nThreads) or",
    "metadata": {
      "Topic": "https://kotlinlang.org/api/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/new-fixed-thread-pool-context.html"
    }
  },
  {
    "chunk": "or Dispatchers.Default.limitedParallelism(nThreads) instead.",
    "metadata": {
      "Topic": "https://kotlinlang.org/api/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/new-fixed-thread-pool-context.html"
    }
  },
  {
    "chunk": "If you need a completely separate thread pool with scheduling policy that is based on the standard JDK executors, use the following expression:",
    "metadata": {
      "Topic": "https://kotlinlang.org/api/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/new-fixed-thread-pool-context.html"
    }
  },
  {
    "chunk": "use the following expression: Executors.newFixedThreadPool().asCoroutineDispatcher(). See Executor.asCoroutineDispatcher for details.",
    "metadata": {
      "Topic": "https://kotlinlang.org/api/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/new-fixed-thread-pool-context.html"
    }
  },
  {
    "chunk": "nThreads  \nthe number of threads.  \nname  \nthe base name of the created threads.",
    "metadata": {
      "Topic": "https://kotlinlang.org/api/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/new-fixed-thread-pool-context.html"
    }
  },
  {
    "chunk": "the base name of the created threads.  \nactual fun newFixedThreadPoolContext(nThreads: Int, name: String): CloseableCoroutineDispatcher(source)",
    "metadata": {
      "Topic": "https://kotlinlang.org/api/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/new-fixed-thread-pool-context.html"
    }
  },
  {
    "chunk": "@DelicateCoroutinesApi  \nactual fun newFixedThreadPoolContext(nThreads: Int, name: String): CloseableCoroutineDispatcher(source)",
    "metadata": {
      "Topic": "https://kotlinlang.org/api/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/new-fixed-thread-pool-context.html"
    }
  },
  {
    "chunk": "@DelicateCoroutinesApi",
    "metadata": {
      "Topic": "https://kotlinlang.org/api/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/new-fixed-thread-pool-context.html"
    }
  },
  {
    "chunk": "newSingleThreadContext  \nconcurrent  \nParameters  \nfun newSingleThreadContext(name: String): CloseableCoroutineDispatcher(source)",
    "metadata": {
      "Topic": "https://kotlinlang.org/api/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/new-single-thread-context.html"
    }
  },
  {
    "chunk": "@ExperimentalCoroutinesApi  \n@DelicateCoroutinesApi",
    "metadata": {
      "Topic": "https://kotlinlang.org/api/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/new-single-thread-context.html"
    }
  },
  {
    "chunk": "Creates a coroutine execution context using a single thread with built-in yield support. NOTE: The resulting CloseableCoroutineDispatcher owns native",
    "metadata": {
      "Topic": "https://kotlinlang.org/api/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/new-single-thread-context.html"
    }
  },
  {
    "chunk": "owns native resources (its thread). Resources are reclaimed by CloseableCoroutineDispatcher.close.",
    "metadata": {
      "Topic": "https://kotlinlang.org/api/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/new-single-thread-context.html"
    }
  },
  {
    "chunk": "If the resulting dispatcher is closed and attempt to submit a task is made, then:",
    "metadata": {
      "Topic": "https://kotlinlang.org/api/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/new-single-thread-context.html"
    }
  },
  {
    "chunk": "On the JVM, the Job of the affected task is cancelled and the task is submitted to the Dispatchers.IO, so that the affected coroutine can clean up",
    "metadata": {
      "Topic": "https://kotlinlang.org/api/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/new-single-thread-context.html"
    }
  },
  {
    "chunk": "the affected coroutine can clean up its resources and promptly complete.",
    "metadata": {
      "Topic": "https://kotlinlang.org/api/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/new-single-thread-context.html"
    }
  },
  {
    "chunk": "On Native, the attempt to submit a task throws an exception.",
    "metadata": {
      "Topic": "https://kotlinlang.org/api/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/new-single-thread-context.html"
    }
  },
  {
    "chunk": "This is a delicate API. The result of this method is a closeable resource with the associated native resources (threads or native workers). It should",
    "metadata": {
      "Topic": "https://kotlinlang.org/api/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/new-single-thread-context.html"
    }
  },
  {
    "chunk": "(threads or native workers). It should not be allocated in place, should be closed at the end of its lifecycle, and has non-trivial memory and CPU",
    "metadata": {
      "Topic": "https://kotlinlang.org/api/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/new-single-thread-context.html"
    }
  },
  {
    "chunk": "and has non-trivial memory and CPU footprint. If you do not need a separate thread pool, but only have to limit effective parallelism of the",
    "metadata": {
      "Topic": "https://kotlinlang.org/api/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/new-single-thread-context.html"
    }
  },
  {
    "chunk": "to limit effective parallelism of the dispatcher, it is recommended to use Dispatchers.IO.limitedParallelism(1) or",
    "metadata": {
      "Topic": "https://kotlinlang.org/api/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/new-single-thread-context.html"
    }
  },
  {
    "chunk": "Dispatchers.IO.limitedParallelism(1) or Dispatchers.Default.limitedParallelism(1) instead.",
    "metadata": {
      "Topic": "https://kotlinlang.org/api/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/new-single-thread-context.html"
    }
  },
  {
    "chunk": "If you need a completely separate thread pool with scheduling policy that is based on the standard JDK executors, use the following expression:",
    "metadata": {
      "Topic": "https://kotlinlang.org/api/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/new-single-thread-context.html"
    }
  },
  {
    "chunk": "use the following expression: Executors.newSingleThreadExecutor().asCoroutineDispatcher(). See Executor.asCoroutineDispatcher for details.",
    "metadata": {
      "Topic": "https://kotlinlang.org/api/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/new-single-thread-context.html"
    }
  },
  {
    "chunk": "name  \nthe base name of the created thread.",
    "metadata": {
      "Topic": "https://kotlinlang.org/api/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/new-single-thread-context.html"
    }
  }
]