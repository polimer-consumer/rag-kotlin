[
  {
    "chunk": "Semaphore  \nParameters  \nfun Semaphore(permits: Int, acquiredPermits: Int = 0): Semaphore(source)  \nCreates new Semaphore instance.  \npermits  \nthe number of permits available in this semaphore.  \nacquiredPermits  \nthe number of already acquired permits, should be between 0 and permits (inclusively).",
    "metadata": {}
  },
  {
    "chunk": "onSubscription  \nfun <T> SharedFlow<T>.onSubscription(action: suspend FlowCollector<T>.() -> Unit): SharedFlow<T>(source)  \nReturns a flow that invokes the given action after this shared flow starts to be collected (after the subscription is registered).  \nThe action is called before any value is emitted from the upstream flow to this subscription but after the subscription is established. It is guaranteed that all emissions to the upstream flow that happen inside or immediately after this onSubscription action will be collected by this subscription.",
    "metadata": {}
  },
  {
    "chunk": "The receiver of the action is FlowCollector, so onSubscription can emit additional elements.",
    "metadata": {}
  },
  {
    "chunk": "updateAndGet  \ninline fun <T> MutableStateFlow<T>.updateAndGet(function: (T) -> T): T(source)  \nUpdates the MutableStateFlow.value atomically using the specified function of its value, and returns the new value.  \nfunction may be evaluated multiple times, if value is being concurrently updated.",
    "metadata": {}
  },
  {
    "chunk": "ClosedSendChannelException",
    "metadata": {}
  },
  {
    "chunk": "class ClosedSendChannelException(message: String?) : IllegalStateException(source)  \nIndicates an attempt to send to a isClosedForSend channel that was closed without a cause. A failed channel rethrows the original close cause exception on send attempts.  \nThis exception is a subclass of IllegalStateException, because, conceptually, it is the sender's responsibility to close the channel and not try to send anything thereafter. Attempts to send to a closed channel indicate a logical error in the sender's code.",
    "metadata": {
      "Topic": "ClosedSendChannelException"
    }
  },
  {
    "chunk": "Members  \nConstructors",
    "metadata": {}
  },
  {
    "chunk": "ClosedSendChannelException  \nconstructor(message: String?)",
    "metadata": {
      "Part": "Constructors"
    }
  },
  {
    "chunk": "ConflatedBroadcastChannel",
    "metadata": {}
  },
  {
    "chunk": "class ConflatedBroadcastChannel<E> : BroadcastChannel<E> (source)  \n@ObsoleteCoroutinesApi  \nDeprecated",
    "metadata": {
      "Topic": "ConflatedBroadcastChannel"
    }
  },
  {
    "chunk": "ConflatedBroadcastChannel is deprecated in the favour of SharedFlow and is no longer supported",
    "metadata": {
      "Topic": "ConflatedBroadcastChannel",
      "Sub-part": "Deprecated"
    }
  },
  {
    "chunk": "Broadcasts the most recently sent element (aka value) to all openSubscription subscribers.  \nBack-to-send sent elements are conflated -- only the most recently sent value is received, while previously sent elements are lost. Every subscriber immediately receives the most recently sent element. Sender to this broadcast channel never suspends and trySend always succeeds.  \nA secondary constructor can be used to create an instance of this class that already holds a value. This channel is also created by BroadcastChannel(Channel.CONFLATED) factory function invocation.",
    "metadata": {
      "Topic": "ConflatedBroadcastChannel"
    }
  },
  {
    "chunk": "In this implementation, opening and closing subscription takes linear time in the number of subscribers.  \nNote: This API is obsolete since 1.5.0 and deprecated for removal since 1.7.0 It is replaced with SharedFlow.",
    "metadata": {
      "Topic": "ConflatedBroadcastChannel"
    }
  },
  {
    "chunk": "Members  \nConstructors",
    "metadata": {}
  },
  {
    "chunk": "ConflatedBroadcastChannel  \nconstructor()  \nconstructor(value: E)  \nCreates an instance of this class that already holds a value.",
    "metadata": {
      "Part": "Constructors"
    }
  },
  {
    "chunk": "Properties",
    "metadata": {}
  },
  {
    "chunk": "value  \nLink copied to clipboard  \nval value: E  \nThe most recently sent element to this channel.  \nvalueOrNull  \nLink copied to clipboard  \nval valueOrNull: E?  \nThe most recently sent element to this channel or null when this class is constructed without initial value and no value was sent yet or if it was closed.",
    "metadata": {
      "Part": "Properties"
    }
  }
]